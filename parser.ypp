%{
#include <stdlib.h>
#include <iostream>
#include "external_file.hpp"
#include "output.hpp"
#include <string>
#include<sys/types.h>
using namespace std;

int yylex();
extern void yyerror (const char*);
extern int yylineno;

%}

%start			Program
%token			VOID
%token			INT
%token			BYTE
%token			B
%token			BOOL

%token			TRUE
%token			FALSE
%token			RETURN
%nonassoc		IF
%nonassoc		ELSE
%token			WHILE
%token			BREAK
%token			DEFAULT
%token			COLON
%token			SC
%token			COMMA

%token			LBRACE
%token			RBRACE
%token			LBRACK
%token			RBRACK

%token 			ID
%token			NUM
%token			STRING
/* level 1 */
%right 			ASSIGN
/* level 3 */
%left			OR
/* level 4 */
%left			AND
/* level 8 */
%left 			RELOPEQ //==
%left		 	RELOPNEQ //!=
/* level 9 */
%nonassoc		RELOPSEQ //<=
%nonassoc		RELOPLEQ //>=
%nonassoc		RELOPSML //<
%nonassoc		RELOPLRG //>	
/* level 11 */
%left			BINOPADD //+
%left 			BINOPSUB //-
/* level 12 */
%left 			BINOPMUL //*
%left			BINOPDIV //"/"
/* level 14 */
%right			NOT
/* level 16 */
%left			LPAREN
%left			RPAREN


%%

Program:		 Funcs {$$=new Program($1,yylineno);}
;
Funcs : 		FuncDecl Funcs {	//cout<< "parser:"<<((Funcs*) $2)->f_list << endl;
									//cout<< "parser:"<<((FuncDecl*) $1)->f_name << endl;
									$$=new Funcs($1,$2,yylineno);
								 
								 //cout<< "parser:"<<((Funcs*) $2)->f_list << endl;
								 }
|				/* epsilon*/ {$$=new Funcs(yylineno);
							//cout<< "parser: epsilon"<<endl;
							}		
;
FuncDecl :  	RetType ID {FuncDeclPartOne($1,$2,yylineno);}
				LPAREN OpenScopeF Formals RPAREN {FuncDeclPartTwo($2,$6,yylineno);}
				LBRACE Statements {$$=new FuncDecl($1,$2,$6,$10,yylineno);} //TODO: check return type
				RBRACE CloseScopeF {$$=$11;}
;
RetType : 		Type {$$=new RetType($1,yylineno);}
| 						VOID {$$=new RetType(yylineno);}
;
Formals : 		FormalsList {$$=new Formals($1,yylineno);}
|				/* epsilon*/ {$$=new Formals(yylineno);}						
;
FormalsList:	FormalDecl {$$=new FormalsList($1,yylineno);}
|						FormalDecl COMMA FormalsList {$$=new FormalsList($1,$3,yylineno);}
;
FormalDecl:	Type ID {$$=new FormalDecl($1,$2,yylineno);}
//================================== ARRAY ===============================================
| 			Type ID LBRACK NUM RBRACK {$$=new FormalDecl($1,$2,$4,"Type ID LBRACK NUM RBRACK",yylineno);}
|			Type ID LBRACK NUM B RBRACK {$$=new FormalDecl($1,$2,$4,"Type ID LBRACK NUM B RBRACK",yylineno);}
//================================== ARRAY END ===========================================
;

StatementIF:	IF LPAREN Exp RPAREN {CheckBoolExpression($3,yylineno);}
				OpenScope Statement {$$=new StatementIF($3,$7,yylineno);}
;
Statements:	Statement {$$=new Statements($1,yylineno);}
| 						Statements Statement {$$=new Statements($1,$2,yylineno);}
;
Statement:		LBRACE OpenScope Statements CloseScope RBRACE {$$=new Statement("STATEMENTS",$3,yylineno);}
|						Type ID SC {$$=new Statement($1,$2,yylineno);}
|						Type ID ASSIGN Exp SC {$$=new Statement($1,$2,$4,yylineno);}
//================================== ARRAY ===============================================
| 						Type ID LBRACK NUM RBRACK SC {$$=new Statement($1,$2,$4,"Type ID LBRACK NUM RBRACK SC",yylineno);}
|						Type ID LBRACK NUM B RBRACK SC {$$=new Statement($1,$2,$4,"Type ID LBRACK NUM B RBRACK SC",yylineno);}
//================================== ARRAY END ===========================================
|						ID ASSIGN Exp SC {$$=new Statement("ASSIGN",$1,$3,yylineno);}
//================================== ARRAY assign ========================================
|						ID LBRACK Exp RBRACK ASSIGN Exp SC {$$=new Statement($1,$3,$6,"ID LBRACK Exp RBRACK ASSIGN Exp SC","dummy",yylineno);}
//================================== ARRAY assign end=====================================
|						Call SC {$$=new Statement($1,yylineno);}
|						RETURN SC {$$=new Statement("RETURN",yylineno);}
|						RETURN Exp SC{$$=new Statement("RETURN",$2,yylineno);}
|						BREAK SC {if(st.getWhileCount()  <= 0){output::errorUnexpectedBreak(yylineno);st.set_prints(false); exit(0);};$$=new Statement("BREAK",yylineno);}
;
Statement:		StatementIF CloseScope %prec IF	{$$=new Statement($1,"IF",yylineno);}
;
Statement:		StatementIF CloseScope ELSE {;}
				OpenScope Statement {$$=new Statement($1,$6,yylineno,yylineno);}
				CloseScope {;}
;
Statement:		WHILE LPAREN Exp RPAREN {CheckBoolExpression($3,yylineno);st.incWhile();}
				OpenScope Statement {;}
				CloseScope {$$=new Statement($3,$7,"WHILE",yylineno);st.decWhile();}



;

Call:					ID LPAREN ExpList RPAREN {$$=new Call($1,$3,yylineno);}
|						ID LPAREN RPAREN {$$=new Call($1,yylineno);}
;
ExpList:			Exp {$$=new ExpList($1,yylineno);}
|						Exp COMMA ExpList {$$=new ExpList($1,$3,yylineno);}
;
Type:				INT {$$=new Type("INT",yylineno);}
|						BYTE {$$=new Type("BYTE",yylineno);}
|						BOOL {$$=new Type("BOOL",yylineno);}
;
Exp:				LPAREN Exp RPAREN {$$=new Exp("(",$2,")",yylineno);}
//================================== ARRAY Exp ===============================================
|					ID LBRACK Exp RBRACK {$$=new Exp($1,$3,"ID LBRACK Exp RBRACK",yylineno);}
//================================== ARRAY Exp end ===========================================
|						Exp BINOPADD Exp {$$=new Exp("+",$1,$3,yylineno);}
|						Exp BINOPSUB Exp {$$=new Exp("-",$1,$3,yylineno);}
|						Exp BINOPMUL Exp {$$=new Exp("*",$1,$3,yylineno);}
|						Exp BINOPDIV Exp {$$=new Exp("/",$1,$3,yylineno);}
|						ID {$$=new Exp("ID",$1,yylineno);}
|						Call  {$$ = new Exp("Call",$1,yylineno);}
|						NUM {$$=new Exp("INT",$1,yylineno);}
|						NUM B {$$=new Exp("B",$1,yylineno);}
|						STRING {$$=new Exp("STRING",$1,yylineno);}
|						TRUE {$$=new Exp("TRUE",$1,yylineno);}
|						FALSE {$$=new Exp("FALSE",$1,yylineno);}
|						NOT Exp {$$=new Exp($2,yylineno);}
|						Exp AND Exp {$$=new Exp("AND",$1,$3,yylineno);}
|						Exp OR Exp {$$=new Exp("OR",$1,$3,yylineno);}
|						Exp RELOPEQ Exp {$$=new Exp("==",$1,$3,yylineno);}
|						Exp RELOPNEQ Exp {$$=new Exp("!=",$1,$3,yylineno);}
|						Exp RELOPSEQ Exp {$$=new Exp("<=",$1,$3,yylineno);}
|						Exp RELOPLEQ Exp {$$=new Exp(">=",$1,$3,yylineno);}
|						Exp RELOPSML Exp {$$=new Exp("<",$1,$3,yylineno);}
|						Exp RELOPLRG Exp {$$=new Exp(">",$1,$3,yylineno);}
;
OpenScopeF: 		//	{openFunctionScope();}
;
CloseScopeF:  			{closeFunctionScope();}
;
OpenScope:				{openScope();}
;
CloseScope:				{closeScope();}
;

%%

void yyerror(const char* s){

output::errorSyn(yylineno);
st.set_prints(false);

 exit(0);
} 

SymbolsTable st;
int program_main;

int main(){
	program_main = 0;
	pair<string,string> params[1] ;
	params[0] = pair<string,string> ("STRING","x");
	st.addNameable(Name("print","func","VOID",1,params));
	pair<string,string> another[1] ;
	another[0] = pair<string,string> ("INT","y");
	st.addNameable(Name("printi","func","VOID",1,another));
	
	int ret_val =  yyparse();
	if(ret_val != 0 ){
		output::errorSyn(yylineno);
		st.set_prints(false); exit(0);
	} else {
		if(program_main == 0){
			output::errorMainMissing();
			st.set_prints(false); exit(0);
		}
	}
	
	st.set_prints(true);
	return ret_val;
} 

